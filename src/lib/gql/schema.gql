type User {
  email: String! @unique
  username: String @unique
  fullName: String
  created: Time!
  onboard: Boolean!
  following: [Follow] @relation(name: "following")
  followers: [Follow] @relation(name: "followers")
  likes: [Photo] @relation
  bio: String 
  headline: String
}

type Follow {
  user: User! @relation(name: "following")
  follows: User! @relation(name: "followers")
}

type Photo {
  author: User!
  src: String!
  posted: Time!
  caption: String
  liked: [User] @relation
  likeCount: Int
  comments: [Comment] @relation
}

type Comment {
  author: User!
  photo: Photo!
  text: String!
  posted: Time!
}

type Query {
  getTimeline: [PhotoItem]! @resolver(name: "get_timeline", paginated: true)
  getExplore: [PhotoItem]! @resolver(name: "get_explore", paginated: true)
}

type PhotoItem @embedded {
  photo: Photo!
  likeCount: Int!
}

type Mutation {
  loginUser(input: LoginUserInput!): LoginUserPayload! @resolver(name: "login_user")
  likePhoto(input: LikePhotoInput!): Photo! @resolver(name: "like_photo")
}

input LoginUserInput {
  email: String!
}
type LoginUserPayload @embedded {
  token: String!
  exp: Time!
  userInfo: User!
}

input LikePhotoInput {
  like: Boolean!
}

# TODO: Add base types from adaptation
# TODO: type query with follow and like counts for users and photos respectively.
# easy implementation see FQL Count func: https://docs.fauna.com/fauna/current/api/fql/functions/count?lang=javascript
